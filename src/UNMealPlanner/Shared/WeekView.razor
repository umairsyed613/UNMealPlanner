@inject IJSRuntime JsRuntime
@inject AppStates AppStates

<style>
    @@media (min-width: 768px) {
        ::-webkit-scrollbar {
            width: 10px !important;
            height: 5px !important
        }
        /* Track */
        /*::-webkit-scrollbar-track {
            background: #f1f1f1;
        }*/
        /* Handle */
        ::-webkit-scrollbar-thumb {
            background: #C5C5C5;
        }
    }


    .wview {
        max-width: 1051px;
        margin: auto;
    }

    .wdview {
        scroll-behavior: smooth;
        overflow: auto;
    }

        .wdview > .wday:last-child::after {
            content: "";
            display: block;
            position: absolute;
            right: -2rem;
            width: 1px;
            height: 1px;
        }

    /*    .wdayfocus:before {
        position: absolute;
        content: '▼';
        top: -22px;
        color: grey;
        align-items: center;
        justify-content: center;
        display: flex;
    }*/

        .currentSelected:after {
        position: absolute;
        content: '▲';
        top: 82px;
        color: grey;
        align-items: center;
        justify-content: center;
        display: flex;
    }

    .currentSelected {
        position: relative;
        border-radius: 1rem !important;
        cursor: pointer;
        top: -15px;
        transition: top 0.3s ease-in-out;
        background-color: #b31132;
        border: 0.15rem solid #ffffff !important;
    }

    .currentSelected > * {
            color: white !important;
        }


    .wday {
        position: relative;
        border-radius: 1rem !important;
        cursor: pointer;
        border: 1px solid #d6d6d6 !important;
        top: 0;
        transition: top 0.3s ease-in-out;
    }

    .wday:hover {
        position: relative;
        top: -15px;
        background-color: #b31132;
    }

        .wday:hover > * {
            color: white;
        }

    .wday:hover:before {
        content: '';
        position: absolute;
        left: 0;
        top: 74px;
        height: 35px;
        width: 100%;
        box-sizing: border-box;
    }

    .DayNr {
        font-size: 1.2rem;
        font-weight: bold;
        color: #343a40;
    }

    .DayName {
        font-size: 1rem;
        color: gray;
    }
</style>

<div class="wview d-flex flex-column w-100 mt-3">
    <div class="d-flex flex-row mx-3">
        <div class="d-flex flex-row flex-1 user-select-none">
            <h3>@CalendarBuilder.GetMonthName(DateTime.Now.Year, DateTime.Now.Month)</h3>
            <small>@DateTime.Now.Year</small>
        </div>
        <div class="mx-2">
            <ChangeView />
        </div>
    </div>
    <div class="d-flex flex-row justify-content-center p-2 user-select-none"><small class="text-muted">Week: @weekNumber</small></div>

    <div class="d-flex flex-row flex-nowrap wdview px-3 py-4">

        @foreach (var item in CalenderData)
        {
            <div class="d-flex flex-column justify-content-center align-items-center user-select-none shadow mr-3 p-3 @(item.IsCurrentDay ? "wdayfocus" : "")
                 @(SelectedDay?.Day == item.Day ? "currentSelected" : "wday")"
                 id="@(item.IsCurrentDay ? "todayMobile" : "unknown")" @onclick="@(() => SelectDay(item))">
                <div class="DayName">@item.DayOfWeek.ToString().Substring(0, 3)</div>
                <div class="DayNr">@item.Day</div>
            </div>
        }

    </div>
    <div class="d-flex flex-row mt-4">
        @if (SelectedDay != null)
        {
            <CalendarDay Item="@SelectedDay" Nr="1" IsMobileView="true" />
        }
    </div>

</div>


@code {

    List<CalenderViewItem> CalenderData = null;

    CalenderViewItem SelectedDay = null;

    private int weekNumber = 0;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        CalenderData = CalendarBuilder.GetDaysOfMonthForMobileView(DateTime.Now.Year, DateTime.Now.Month);

        SelectDay(CalenderData.First(w => w.IsCurrentDay));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("CheckForToday");
        }
    }

    private void SelectDay(CalenderViewItem item)
    {
        SelectedDay = item;
        weekNumber = CalendarBuilder.GetWeekOfMonth(item.Date);
        StateHasChanged();
    }

}