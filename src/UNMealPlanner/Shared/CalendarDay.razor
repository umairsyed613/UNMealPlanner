@inject IModalService Modal
@inject IMealService MealService


@if (IsMobileView)
{
    <div class="d-flex flex-row flex-nowrap mb-2">
        <div class="mobileDayDiv user-select-none shadow rounded flex-column text-center bg-white p-2 @(isToday ? "mobileDayDivToday": "")">
            <div class="mobileDayNum">@Item.Day</div>
            <div class="mobileDayName">@Item.DayOfWeek.ToString().Substring(0, 3)</div>
            @*<div class="mobileDayName">Plan</div>*@
        </div>
        <div class="mobileMealsDiv shadow ml-2 p-4 bg-white w-100" id="@(isToday ? "todayMobile" : "unknown")">
            @if (MealsOfDay != null)
            {
                @foreach (var data in MealsOfDay.DayMeals)
                {
                    <div class="flex-column">
                        <div class="mealType mb-1 @data.MealType">@data.MealType</div>
                        <div class="mealName text-capitalize text-break mb-1">@data.DishName</div>
                        <div class="mealCalories"><small class="text-muted">Calories : @data.CaloriesCount</small></div>
                    </div>
                    <div class="mealsDivider mt-1 mb-1 border-top"></div>
                }
                <div class="mealCalories"><small class="text-muted">Total Calories : @MealsOfDay.GetTotalCalories()</small></div>
                @if (!Item.IsReadonly)
                {
                    <div class="d-flex justify-content-end">
                        <button class="btn mealRegisterMobBtn" @onclick="ShowMealDialog">
                            <span class="oi oi-task" data-toggle="tooltip" data-placement="left" title="Tap register meals"></span>
                        </button>
                    </div>
                }
            }
            else
            {
                <div class="mealName">
                    <small class="text-muted">No Meals planned!</small>
                    @if (!Item.IsReadonly)
                    {
                        <button class="btn mealRegisterMobBtn float-right" @onclick="ShowMealDialog">
                            <span class="oi oi-task" data-toggle="tooltip" data-placement="left" title="Tap register meals"></span>
                        </button>
                    }
                </div>
            }
        </div>

    </div>
    <div class="mt-3 mb-3 border-top"></div>
}
else
{
    @if (Item.IsDisabled)
    {
        <div @onclick="ShowMealDialog" class="day day--disabled@(isNoBorderRight ? "" : " day-border-right")">@Item.Day</div>
    }
    else
    {
        <div @onclick="ShowMealDialog" class="day@(isNoBorderRight ? "" : " day-border-right") @(Item.IsCurrentDay ? "today" : "")">@Item.Day</div>
    }
}


@code {

    [Parameter]
    public bool IsMobileView { get; set; }

    private bool isNoBorderRight = false;

    private Meals MealsOfDay;

    private bool isToday = false;

    [Parameter]
    public int Nr
    {
        set
        {
            isNoBorderRight = value % 7 == 0;
        }
    }

    [Parameter]
    public CalenderViewItem Item { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (IsMobileView)
        {
            await GetMealsForTheDay();
        }

        isToday = Item.IsCurrentDay;
    }

    private async Task ShowMealDialog()
    {
        var param = new ModalParameters();
        param.Add(nameof(MealComponent.Item), Item);

        var modalRef = Modal.Show<MealComponent>($"Meal Plan ({Item.DayOfWeek} {Item.Day} {Item.MonthName} {Item.Year})", param);

        var modalRefResult = await modalRef.Result;

        if (IsMobileView && modalRefResult.Cancelled)
        {
            await GetMealsForTheDay();
        }
    }

    private async Task GetMealsForTheDay()
    {
        MealsOfDay = await MealService.GetMealsByDatetime(Item.Date);
    }
}