@page "/grocerylist"
@inject IModalService Modal
@inject IGroceryListService GroceryListService

<style>
    .container-fluid {
        padding: 0 !important;
    }
</style>

<div class="d-flex flex-column w-100 groceryAccordBg">
    <div class="card-header d-flex flex-row align-items-center mb-3">
        <div class="mr-auto pt-1">
            <h4 class="user-select-none">Grocery List</h4>
        </div>
        <button class="btn btn-outline-primary" @onclick="AddGroceryList">
            <svg width="1.5em" height="1.5em" viewBox="0 0 16 16" class="bi bi-plus" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                <path fill-rule="evenodd" d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"/>
            </svg>
        </button>
    </div>

    <div class="accordion">
        @if (GroceryListsData != null)
        {
            foreach (var data in GroceryListsData)
            {
                @*<a href="./viewgrocery/@item.Key" class="list-group-item list-group-item-action">
                    <div class="d-flex w-100 justify-content-between">
                        <h5 class="mb-1 user-select-none">@item.Name</h5>
                        <small class="user-select-none">@item.GetTodayDays() days ago</small>
                    </div>
                    <p class="mb-1">@item.Description</p>
                    <small>Total Items : @item.Items.Count</small> <small class="ml-2">Completed Items: @item.Items.Where(w => w.IsCompleted).Count()</small>
                </a>*@

                <div class="contentBx mb-4 p-3 shadow @(Expanded.Contains(data.Key) ? "active" : "")">
                    <div class="heading text-capitalize" @onclick="@(() => ExpandContent(data.Key))">@data.Name</div>
                    <div class="content mt-2">
                        <ol>
                            @foreach (var item in data.Items)
                            {
                                <li @onclick="@(() => MarkItemCompleted(data, item.Key))" data-toggle="tooltip" data-placement="top" title="Tap to mark it completed">
                                    <div class="d-flex flex-row flex-nowrap justify-content-between align-items-center">
                                        <div class="text-capitalize flex-grow-1">
                                            @if (item.IsCompleted)
                                            {
                                                <s>@item.Name</s>
                                            }
                                            else
                                            {
                                                @item.Name
                                            }
                                        </div>
                                        <div class="mr-2">@item.Quantity <small class="text-muted">/ Qty</small></div>
                                        <div class="pt-1">
                                            <label class="switch">
                                                <input type="checkbox" checked=@item.IsCompleted @onclick="@(() => MarkItemCompleted(data, item.Key))">
                                                <span class="slider round"></span>
                                            </label>
                                        </div>
                                    </div>
                                </li>
                            }
                        </ol>
                    </div>
                </div>
            }
        }
        else
        {
            <span class="p-4 user-select-none">You have no data registered!</span>
        }
        @*<div class="contentBx mb-4 p-3 shadow">
            <div class="heading">GroceryList 1</div>
            <div class="content pl-4 mt-2">
                this is the content
            </div>
        </div>*@
    </div>
</div>

<CustomNavigator/>

@code{
    private List<GroceryList> GroceryListsData;
    private List<string> Expanded = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        await LoadList();
    }

    private async Task ExpandContent(string key)
    {
        await Task.Run(() =>
        {
            if (Expanded.Contains(key))
            {
                Expanded.Remove(key);
            }
            else
            {
                Expanded.Add(key);
            }

        });

        StateHasChanged();
    }

    private async Task AddGroceryList(){
        var modalRef = Modal.Show<GroceryListComponent>($"New Grocery List");

        var result = await modalRef.Result;

        if (result.Cancelled)
        {
            //Console.WriteLine("Modal is Cancelled");
            await LoadList();
        }
    }

    private async Task LoadList()
    {
        GroceryListsData = await GroceryListService.GetALlGroceriesList();
        if (GroceryListsData != null)
        {
            GroceryListsData = GroceryListsData.OrderByDescending(o => o.CreatedAt).ToList();
        }
        StateHasChanged();
    }

    private async Task MarkItemCompleted(GroceryList data, string key)
    {
        var item = data.Items.FirstOrDefault(f => f.Key == key);

        if (item != null)
        {
            item.IsCompleted = !item.IsCompleted;
        }

        await GroceryListService.UpsertGroceryList(data);

        await LoadList();
    }
}