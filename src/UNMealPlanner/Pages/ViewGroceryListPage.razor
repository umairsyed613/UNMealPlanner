@page "/viewgrocery/{id}"
@using System.Runtime.CompilerServices
@inject IGroceryListService GroceryListService
<style>

    .groceryList ol {
        counter-reset: li;
        list-style: none;
        padding: 0;
        text-shadow: 0 1px 0 rgba(255,255,255,.5);
    }

    .groceryList li {
        position: relative;
        display: block;
        padding: .4em .4em .4em .8em;
        *padding: .4em;
        margin: .5em 0 .5em 2.5em;
        background: #f9f9f9;
        color: #222;
        text-decoration: none;
        transition: all .3s ease-out;
        -webkit-box-shadow: 0 1px 0 rgba(0,0,0,.15);
        -moz-box-shadow: 0 1px 0 rgba(0,0,0,.15);
        box-shadow: 0 1px 0 rgba(0,0,0,.15);
        cursor: pointer;
    }

        .groceryList li:hover {
            background: #f1f1f1;
        }

        .groceryList li:before {
            content: counter(li);
            counter-increment: li;
            position: absolute;
            left: -2.5em;
            top: 50%;
            margin-top: -1em;
            background: #b31132;
            height: 2em;
            width: 2em;
            line-height: 2em;
            text-align: center;
            font-weight: bold;
            color: #f9f9f9;
        }

        .groceryList li:after {
            position: absolute;
            content: '';
            border: .5em solid transparent;
            left: -1em;
            top: 50%;
            margin-top: -.5em;
            transition: all .3s ease-out;
        }

        .groceryList li:hover:after {
            left: -.5em;
            border-left-color: #b31132;
        }

    .switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
    }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        -webkit-transition: .4s;
        transition: .4s;
    }

        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            -webkit-transition: .4s;
            transition: .4s;
        }

    input:checked + .slider {
        background-color: #2196F3;
    }

    input:focus + .slider {
        box-shadow: 0 0 1px #2196F3;
    }

    input:checked + .slider:before {
        -webkit-transform: translateX(26px);
        -ms-transform: translateX(26px);
        transform: translateX(26px);
    }

    /* Rounded sliders */
    .slider.round {
        border-radius: 34px;
    }

        .slider.round:before {
            border-radius: 50%;
        }
</style>

<div class="d-flex flex-column p-3 border rounded">
    @if (GroceryList == null)
    {
        <div class="spinner-border text-danger" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    }
    else
    {

        <div class="mb-2">
            <h3 class="user-select-none text-capitalize">@GroceryList.Name</h3>
            <small class="text-muted user-select-none">
                <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-info mr-1" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" d="M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                    <path d="M8.93 6.588l-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588z" />
                    <circle cx="8" cy="4.5" r="1" />
                </svg>Tap on the grocery item to mark it as done.
            </small>
            <hr />
        </div>

        <div class="groceryList mb-2">
            <ol>
                @foreach (var item in GroceryList.Items)
                {
                    <li @onclick="@(() => MarkItemCompleted(item.Key))" data-toggle="tooltip" data-placement="top" title="Tap to mark it completed">
                        <div class="d-flex flex-row flex-nowrap justify-content-between align-items-center">
                            <div class="text-capitalize flex-grow-1">
                                @if (item.IsCompleted)
                                {
                                    <s>@item.Name</s>
                                }
                                else
                                {
                                    @item.Name
                                }
                            </div>
                            <div class="mr-2">@item.Quantity <small class="text-muted">/ Qty</small></div>
                            <div>
                                <label class="switch">
                                    <input type="checkbox" checked=@item.IsCompleted @onclick="@(() => MarkItemCompleted(item.Key))">
                                    <span class="slider round"></span>
                                </label>
                            </div>
                        </div>
                    </li>
                }
            </ol>
        </div>
    }
</div>

<CustomNavigator />

@code {
    [Parameter]
    public string id { get; set; }

    private GroceryList GroceryList;


    protected override async Task OnParametersSetAsync()
    {
        await GetList();
    }

    private async Task GetList()
    {
        GroceryList = await GroceryListService.GetGroceryListById(id);

        //if (GroceryList != null)
        //{
        //    GroceryList.Items = GroceryList.Items.OrderBy(o => o.IsCompleted).ToList();
        //}

        StateHasChanged();
    }

    private async Task MarkItemCompleted(string key)
    {
        var item = GroceryList.Items.FirstOrDefault(f => f.Key == key);

        if (item != null)
        {
            item.IsCompleted = !item.IsCompleted;
        }

        await GroceryListService.UpsertGroceryList(GroceryList);

        await GetList();
    }

}
